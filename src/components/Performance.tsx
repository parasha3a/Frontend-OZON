import React from 'react'
import { motion } from 'framer-motion'
import { useInView } from 'react-intersection-observer'
import { CheckCircle, Clock, MemoryStick, Zap, Database, Container, Globe, Shield } from 'lucide-react'

const Performance: React.FC = () => {
  const [ref, inView] = useInView({ 
    threshold: 0.2, 
    triggerOnce: true 
  })

  const performanceMetrics = [
    {
      metric: '–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏',
      target: '< 3 —á–∞—Å–∞',
      achieved: '~7.5 –º–∏–Ω—É—Ç',
      status: 'success',
      icon: Clock,
      improvement: '24x –±—ã—Å—Ç—Ä–µ–µ'
    },
    {
      metric: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏',
      target: '< 32GB',
      achieved: '< 16GB',
      status: 'success',
      icon: MemoryStick,
      improvement: '50% —ç–∫–æ–Ω–æ–º–∏–∏'
    },
    {
      metric: '–°–∂–∞—Ç–∏–µ –≥—Ä–∞—Ñ–∞',
      target: '400M ‚Üí ~1M —Ä—ë–±–µ—Ä',
      achieved: '99.75% —Å–∂–∞—Ç–∏–µ',
      status: 'success',
      icon: Database,
      improvement: '–§–∞–Ω—Ç–∞—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç'
    },
    {
      metric: '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö',
      target: '< 5 –º–∏–Ω—É—Ç',
      achieved: '4.2 –º–∏–Ω—É—Ç—ã',
      status: 'success',
      icon: Zap,
      improvement: '16% —ç–∫–æ–Ω–æ–º–∏–∏'
    }
  ]

  const deploymentFeatures = [
    {
      icon: Container,
      title: 'Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è',
      description: 'Multi-stage build –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–µ–ø–ª–æ—è'
    },
    {
      icon: Globe,
      title: 'REST API',
      description: 'FastAPI —Å JSON –≤—Ö–æ–¥–Ω—ã–º–∏/–≤—ã—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏'
    },
    {
      icon: Shield,
      title: '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥',
      description: 'Health checks –∏ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'
    },
    {
      icon: Zap,
      title: '–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ',
      description: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤'
    }
  ]

  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.15,
        delayChildren: 0.3
      }
    }
  }

  const itemVariants = {
    hidden: { y: 50, opacity: 0 },
    visible: {
      y: 0,
      opacity: 1,
      transition: {
        type: "spring",
        stiffness: 100,
        damping: 12
      }
    }
  }

  const tableVariants = {
    hidden: { opacity: 0, rotateX: -15 },
    visible: {
      opacity: 1,
      rotateX: 0,
      transition: {
        duration: 0.8,
        staggerChildren: 0.1
      }
    }
  }

  const rowVariants = {
    hidden: { opacity: 0, x: -50 },
    visible: {
      opacity: 1,
      x: 0,
      transition: {
        type: "spring",
        stiffness: 100
      }
    }
  }

  return (
    <section id="performance" className="performance" ref={ref}>
      <div className="container">
        <motion.div
          variants={containerVariants}
          initial="hidden"
          animate={inView ? "visible" : "hidden"}
          className="text-center mb-16"
        >
          <motion.h2 variants={itemVariants}>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</motion.h2>
        </motion.div>

        {/* Performance Table */}
        <motion.div
          variants={tableVariants}
          initial="hidden"
          animate={inView ? "visible" : "hidden"}
          className="perf-table"
        >
          <table>
            <thead>
              <tr>
                <th>–ú–µ—Ç—Ä–∏–∫–∞</th>
                <th>–¶–µ–ª—å</th>
                <th>–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ</th>
                <th>–°—Ç–∞—Ç—É—Å</th>
              </tr>
            </thead>
            <tbody>
              {performanceMetrics.map((item, index) => (
                <motion.tr
                  key={index}
                  variants={rowVariants}
                  whileHover={{ backgroundColor: "rgba(102, 126, 234, 0.05)" }}
                >
                  <td>{item.metric}</td>
                  <td>{item.target}</td>
                  <td>{item.achieved}</td>
                  <td>
                    <span className="status-success">‚úÖ</span>
                  </td>
                </motion.tr>
              ))}
            </tbody>
          </table>
        </motion.div>

        {/* Deployment Readiness */}
        <motion.div
          variants={containerVariants}
          initial="hidden"
          animate={inView ? "visible" : "hidden"}
          className="deployment-info"
        >
          <motion.h3 variants={itemVariants}>üöÄ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É</motion.h3>

          <div className="deployment-grid">
            {deploymentFeatures.map((feature, index) => (
              <motion.div
                key={index}
                variants={itemVariants}
                className="deploy-item"
                whileHover={{ y: -5 }}
              >
                <h4>{feature.title}</h4>
                <p>{feature.description}</p>
              </motion.div>
            ))}
          </div>
        </motion.div>


      </div>
    </section>
  )
}

export default Performance
